<?xml version="1.0" encoding="UTF-8"?>

<!--  根节点<configuration>包含的属性 -->
<!--  scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!--  scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!--  debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<!--  根节点<configuration>的子节点： -->
<!--  <configuration>下面一共有2个属性contextName property，3个子节点，分别是： appender logger root-->
<configuration scan="true" scanPeriod="60 seconds" debug="false" packagingData="true">
    <!-- 据不同环境（prod:生产环境，test:测试环境，dev:开发环境）来定义不同的日志输出， -->
    <!-- 在 logback-spring.xml中使用 springProfile 节点来定义，方法如下： 文件名称不是logback.xml，想使用spring扩展profile支持，要以logback-spring.xml命名 -->
    <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
    <!-- 可以启动服务的时候指定 profile （如不指定使用默认），如指定prod 的方式为： java -jar xxx.jar –spring.profiles.active=prod -->
    <!-- <springProfile name="test,dev"> <logger name="com.dudu.controller"
        level="info" /> </springProfile> -->
    <!-- 生产环境. -->
    <!-- <springProfile name="prod"> <logger name="com.dudu.controller" level="ERROR"
        /> </springProfile> -->

    <!-- 设置上下文名称<contextName> 每个logger都关联到logger上下文，默认上下文名称为“default”。 -->
    <!-- 但可以使用设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。 -->

    <!--定义一些属性变量-->
    <property name="ctxName" value="spring-cloud-gateway"></property>
    <contextName>${ctxName}</contextName>
    <!--定义日志级别变量-->
    <!--要显示mybatis sql这里consoleLogLevel级别要小于等于debug或要小于application.properties中配置的优先级-->
    <property name="ConsoleLogLevel" value="info"/>
    <property name="PackageLogLevel" value="info"/>
    <property name="RootLogLevel" value="info"/>

    <!-- 用来定义变量值的标签， 有两个属性，name和value；其中name的值是变量的名称，value的值时变量定义的值。 -->
    <!-- 通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->

    <property name="LogDir" value="/zldata/uwb/logs/${ctxName}"/>
    <if condition='isDefined("catalina.home")'>
        <then>
            <property name="LogDir" value="${catalina.home}/logs"/>
        </then>
    </if>


    <!-- ConsoleApperder意思是从console中打印出来 -->
    <!--输出到控制台 appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 阈值过滤，就是log行为级别过滤，debug及debug以上的信息会被打印出来 -->
        <!-- ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。如果不用记得注释掉，不然你控制台会发现没日志~ -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!--<level>debug</level>-->
            <level>${ConsoleLogLevel}</level>
        </filter>
        <encoder>
            <!-- pattern模式 %d时间 %thread 线程名 %level行为级别 %logger logger名称 %method 方法名称
                %message 调用方法的入参消息 -->
            <!-- <pattern>%-4d [%thread] %-5level %logger.%method - %message%n</pattern> -->
            <!-- <pattern>%d{yyyyMMddHHmmss}|%-5level| %logger{0}.%M | %msg | %thread
                %n</pattern> -->
            <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36}
                - %msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。RollingFileAppender用于切分文件日志 -->
    <!-- 其中重要的是rollingPolicy的定义，<fileNamePattern>logback.%d{yyyy-MM-dd}.log</fileNamePattern>定义了日志的切分方式——把每一天的日志归档到一个文件中， -->
    <!-- <maxHistory>30</maxHistory>表示只保留最近30天的日志，以防止日志填满整个磁盘空间。同理，可以使用%d{yyyy-MM-dd_HH-mm}来定义精确到分的日志切分方式。 -->
    <!--<totalSizeCap>1GB</totalSizeCap>用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。 -->
    <appender name="ROLLINGFILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 按天新建log日志 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LogDir}/logback-%d{yyyyMMdd}_%i.log</fileNamePattern>
            <!-- 保留30天的历史日志 -->
            <maxHistory>30</maxHistory>
            <totalSizeCap>1GB</totalSizeCap>
            <!-- 基于大小和时间，这个可以有，可以没有 -->
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 当一个日志大小大于10KB，则换一个新的日志。日志名的%i从0开始，自动递增 -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- <encoder>表示对日志进行编码： %d{HH: mm:ss.SSS}——日志输出时间 %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
            %-5level——日志级别，并且使用5个字符靠左对齐 %logger{36}——日志输出者的名字 %msg——日志消息 %n——平台的换行符 -->
        <encoder>
            <!-- %ex就是指抛出的异常，full是显示全部，如果在{}中写入数字，则表示展示多少行 -->
            <pattern>%-4d [%thread] %-5level %logger.%method - %msg%n%ex{full,
                DISPLAY_EX_EVAL}
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。 -->
    <!--name:用来指定受此loger约束的某一个包或者具体的某一个类。 -->
    <!--level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
        如果未设置此属性，那么当前loger将会继承上级的级别。 -->
    <!--addtivity:是否向上级loger传递打印信息。默认是true。 -->
    <!-- 当然如果你把additivity=”false”改成additivity=”true”的话，就会打印两次，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次。 -->
    <!--<logger name="com.zhilutec" level="INFO" additivity="false">-->
    <logger name="com.zhilutec.cloud" level="${PackageLogLevel}" additivity="false">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="ROLLINGFILE"/>
    </logger>

    <!--<logger name="org.springframework.cloud.gateway" level="${PackageLogLevel}" additivity="false">-->
        <!--&lt;!&ndash;<appender-ref ref="STDOUT"/>&ndash;&gt;-->
        <!--<appender-ref ref="ROLLINGFILE"/>-->
    <!--</logger>-->

    <!--<logger name="org.springframework.boot.actuate" level="${PackageLogLevel}" additivity="false">-->
        <!--&lt;!&ndash;<appender-ref ref="STDOUT"/>&ndash;&gt;-->
        <!--<appender-ref ref="ROLLINGFILE"/>-->
    <!--</logger>-->

    <logger name="tk.mybatis" level="${PackageLogLevel}" additivity="false">
        <!--<appender-ref ref="STDOUT"/>-->
        <appender-ref ref="ROLLINGFILE"/>
    </logger>

    <logger name="org.springframework.data.redis" level="${GwLogLevel}" additivity="false">
        <!--<appender-ref ref="STDOUT"/>-->
        <appender-ref ref="ROLLINGFILE"/>
    </logger>

    <!-- root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性。 -->
    <!--level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。 -->
    <!--可以包含零个或多个元素，标识这个appender将会添加到这个loger。 -->
    <!--<root level="info">-->
    <root level="${RootLogLevel}">
        <!--<appender-ref ref="STDOUT"/>-->
        <appender-ref ref="ROLLINGFILE"/>
    </root>
</configuration>