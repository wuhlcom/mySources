package thread.thread_demo;
//sleep()��yield()������
//sleep()��yield()������):sleep()ʹ��ǰ�߳̽���ͣ��״̬������ִ��sleep()���߳���ָ����ʱ���ڿ϶����ᱻִ�У�yield()ֻ��ʹ��ǰ�߳����»ص���ִ��״̬������ִ��yield()���߳��п����ڽ��뵽��ִ��״̬�������ֱ�ִ�С�
//sleep ����ʹ��ǰ�����е��߳�˯��һ��ʱ�䣬���벻������״̬�����ʱ��ĳ������ɳ����趨�ģ�yield ����ʹ��ǰ�߳��ó� CPU ռ��Ȩ�����ó���ʱ���ǲ����趨�ġ�ʵ���ϣ�yield()������Ӧ�����²������ȼ�⵱ǰ�Ƿ�����ͬ���ȼ����̴߳���ͬ������״̬�����У���� CPU  ��ռ��Ȩ�������̣߳����򣬼�������ԭ�����̡߳�����yield()������Ϊ�����á����������л����ø���ͬ�����ȼ��������߳�
//���⣬sleep ��������ϵ����ȼ����̻߳�����л��ᣬ�� yield()  ����ִ��ʱ����ǰ�߳��Դ��ڿ�����״̬�����ԣ��������ó��ϵ����ȼ����߳�Щʱ��� CPU ռ��Ȩ����һ������ϵͳ�У�����ϸ����ȼ����߳�û�е��� sleep ��������û���ܵ� I\O ��������ô���ϵ����ȼ��߳�ֻ�ܵȴ����нϸ����ȼ����߳����н��������л������С� 
//��yield():��ͣ��ǰ����ִ�е��̶߳��󣬲�ִ�������̡߳�
//Thread.yield()���������ǣ���ͣ��ǰ����ִ�е��̶߳��󣬲�ִ�������̡߳�
// yield()Ӧ���������õ�ǰ�����̻߳ص�������״̬�������������ͬ���ȼ��������̻߳�����л��ᡣ��ˣ�ʹ��yield()��Ŀ��������ͬ���ȼ����߳�֮�����ʵ�����תִ�С����ǣ�ʵ�����޷���֤yield()�ﵽ�ò�Ŀ�ģ���Ϊ�ò����̻߳��п��ܱ��̵߳��ȳ����ٴ�ѡ�С�
//
//���ۣ�yield()��δ�����߳�ת���ȴ�/˯��/����״̬���ڴ��������£�yield()�������̴߳�����״̬ת��������״̬�����п���û��Ч�����ɿ������ͼ��
class ThreadYield extends Thread{  
    public ThreadYield(String name) {  
        super(name);  
    }  
   
    @Override  
    public void run() {  
        for (int i = 1; i <= 50; i++) {  
            System.out.println("" + this.getName() + "-----" + i);  
            // ��iΪ30ʱ�����߳̾ͻ��CPUʱ���õ��������������Լ����߳�ִ�У�Ҳ����˭������˭ִ�У�  
            if (i ==30) {  
                this.yield();  
            }  
        }  
      
}  
}

public class YieldThread {  
  
    public static void main(String[] args) {  
          
        ThreadYield yt1 = new ThreadYield("����");  
        ThreadYield yt2 = new ThreadYield("����");  
        yt1.start();  
        yt2.start();  
    }  
  
}  
